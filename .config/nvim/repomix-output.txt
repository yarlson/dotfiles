This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
lua/
  config/
    autocmds.lua
    keymaps.lua
    options.lua
  plugins/
    completion.lua
    debug.lua
    editor.lua
    formatting.lua
    git.lua
    lsp.lua
    telescope.lua
    treesitter.lua
    ui.lua
.luacheckrc
.stylua.toml
clenup.sh
init.lua
lazy-lock.json

================================================================
Files
================================================================

================
File: lua/config/autocmds.lua
================
-- Define autocommands with Neovim's native API
local function create_augroups(definitions)
  for group_name, definition in pairs(definitions) do
    local augroup = vim.api.nvim_create_augroup(group_name, { clear = true })
    for _, def in ipairs(definition) do
      local opts = def.opts or {}
      opts.group = augroup
      vim.api.nvim_create_autocmd(def.event, opts)
    end
  end
end

-- Define autocommands
create_augroups {
  -- Format on save with Conform
  ConformFormatOnSave = {
    {
      event = 'BufWritePre',
      opts = {
        callback = function()
          require('conform').format { async = false }
        end,
      },
    },
  },
}

-- Set filetype for templ files
vim.filetype.add { extension = { templ = 'templ' } }

================
File: lua/config/keymaps.lua
================
local keymap = vim.keymap.set

-- Buffer navigation
-- Standard Neovim buffer nav (still useful)
keymap('n', '<C-l>', function()
  vim.cmd.bnext()
end, { desc = 'Next Buffer (Standard)' })
keymap('n', '<C-h>', function()
  vim.cmd.bprevious()
end, { desc = 'Previous Buffer (Standard)' })

-- Bufferline specific navigation
keymap('n', '[b', '<Cmd>BufferLineCyclePrev<CR>', { desc = 'Previous Buffer (Bufferline)' })
keymap('n', ']b', '<Cmd>BufferLineCycleNext<CR>', { desc = 'Next Buffer (Bufferline)' })

-- Buffer closing
keymap('n', '<leader>bd', function()
  vim.cmd.Bdelete()
end, { desc = 'Delete Current Buffer (Bdelete)' }) -- Keep original Bdelete too

-- Jump to buffer by number (Bufferline)
for i = 1, 9 do
  keymap('n', '<leader>' .. i, function()
    vim.cmd('BufferLineGoToBuffer ' .. i)
  end, { desc = 'Go to Buffer ' .. i })
end

-- Project navigation (using Telescope which integrates with project.nvim)
-- Keymap <leader>fp is already defined in lua/plugins/telescope.lua for finding projects

-- Add other keymaps from your original init.lua here

================
File: lua/config/options.lua
================
-- Core Neovim settings
local opt = vim.opt

-- Leader keys
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

-- Editor settings
local editor_opts = {
  autoindent = true,
  smartindent = true,
  tabstop = 4,
  shiftwidth = 4,
  number = true,
  relativenumber = true,
  clipboard = 'unnamedplus',
  mouse = '',
  termguicolors = true,
  laststatus = 3,
  fillchars = { eob = ' ' },
  list = true,
  listchars = { tab = '▸ ', trail = '▸', extends = '❯', precedes = '❮' },
  undofile = true,
  undodir = vim.fn.stdpath 'cache' .. '/undo',
  undolevels = 1000,
  updatetime = 300,
}

-- Apply editor settings
for k, v in pairs(editor_opts) do
  opt[k] = v
end

-- Append to shortmess to avoid "Pattern not found" messages
opt.shortmess:append 'c'

-- Search settings
local search_opts = {
  hlsearch = true,
  incsearch = true,
  ignorecase = true,
  smartcase = true,
}

-- Apply search settings
for k, v in pairs(search_opts) do
  opt[k] = v
end

-- Folding settings
local fold_opts = {
  foldmethod = 'indent',
  foldlevel = 99,
  foldnestmax = 10,
}

-- Apply folding settings
for k, v in pairs(fold_opts) do
  opt[k] = v
end

-- Indentation settings
local indent_opts = {
  shiftround = true,
  expandtab = true,
  smarttab = true,
}

-- Apply indentation settings
for k, v in pairs(indent_opts) do
  opt[k] = v
end

-- Line wrapping settings
local wrap_opts = {
  wrap = false,
  linebreak = true,
  showbreak = '↳ ',
  breakindent = true,
  showmatch = true,
}

-- Apply line wrapping settings
for k, v in pairs(wrap_opts) do
  opt[k] = v
end

================
File: lua/plugins/completion.lua
================
return {
  {
    'hrsh7th/nvim-cmp',
    dependencies = {
      'L3MON4D3/LuaSnip',
      'saadparwaiz1/cmp_luasnip',
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-path',
      'supermaven-inc/supermaven-nvim',
    },
    config = function()
      local cmp = require 'cmp'
      local luasnip = require 'luasnip'

      -- Define completion mappings separately for clarity
      local cmp_mappings = {
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<CR>'] = cmp.mapping.confirm { select = true },
        ['<Tab>'] = cmp.mapping.select_next_item(),
        ['<S-Tab>'] = cmp.mapping.select_prev_item(),
      }

      -- Define completion sources in priority order
      local cmp_sources = {
        { name = 'supermaven' },
        { name = 'nvim_lsp' },
        { name = 'luasnip' },
        { name = 'buffer' },
        { name = 'path' },
      }

      -- Configure cmp
      cmp.setup {
        snippet = {
          expand = function(args)
            luasnip.lsp_expand(args.body)
          end,
        },
        mapping = cmp.mapping.preset.insert(cmp_mappings),
        sources = cmp_sources,
        experimental = {
          ghost_text = true,
        },
      }

      -- Helper functions for toggling completion
      local function toggle_cmp(enable, is_global)
        if is_global then
          -- Toggle cmp globally
          local config = cmp.get_config()
          config.enabled = enable
          cmp.setup(config)
        else
          -- Toggle cmp for current buffer
          cmp.setup.buffer { enabled = enable }
        end
      end

      local function toggle_supermaven(enable)
        -- Use the official supermaven API
        local api = require 'supermaven-nvim.api'

        if enable then
          -- Start supermaven if it's not already running
          if not api.is_running() then
            api.start()
          end
        else
          -- Stop supermaven if it's running
          if api.is_running() then
            api.stop()
          end
        end
      end

      local function toggle_completion(enable, is_global)
        -- Handle supermaven (globally only, as it doesn't support per-buffer control)
        toggle_supermaven(enable)

        -- Handle cmp (globally or per-buffer)
        toggle_cmp(enable, is_global)

        local scope = is_global and 'globally for all buffers' or 'for this buffer'
        local state = enable and 'enabled' or 'disabled'
        vim.notify('Completion (cmp and supermaven) ' .. state .. ' ' .. scope .. '.', vim.log.levels.INFO)
      end

      -- Custom commands to toggle cmp and supermaven completion
      vim.api.nvim_create_user_command('Cmpoff', function()
        -- Disable cmp for this buffer only
        toggle_cmp(false, false)
        vim.notify('nvim-cmp completion disabled for this buffer.', vim.log.levels.INFO)
      end, { desc = 'Disable nvim-cmp completion for the current buffer', nargs = 0 })

      vim.api.nvim_create_user_command('Cmpon', function()
        -- Enable cmp for this buffer only
        toggle_cmp(true, false)
        vim.notify('nvim-cmp completion enabled for this buffer.', vim.log.levels.INFO)
      end, { desc = 'Enable nvim-cmp completion for the current buffer', nargs = 0 })

      vim.api.nvim_create_user_command('CmpoffAll', function()
        toggle_completion(false, true)
      end, { desc = 'Disable completion (cmp and supermaven) globally for all buffers', nargs = 0 })

      vim.api.nvim_create_user_command('CmponAll', function()
        toggle_completion(true, true)
      end, { desc = 'Enable completion (cmp and supermaven) globally for all buffers', nargs = 0 })
    end,
  },
  {
    'L3MON4D3/LuaSnip',
    dependencies = { 'rafamadriz/friendly-snippets' },
    config = function()
      require('luasnip').setup {}
      require('luasnip.loaders.from_vscode').lazy_load()
    end,
  },
  {
    'supermaven-inc/supermaven-nvim',
    dependencies = { 'hrsh7th/nvim-cmp' },
    config = function()
      require('supermaven-nvim').setup {
        disable_inline_completion = false,
      }
    end,
  },
}

================
File: lua/plugins/debug.lua
================
return {
  {
    'mfussenegger/nvim-dap',
    config = function()
      local dap = require 'dap'

      -- Configure Go debugging
      local function setup_go_adapter()
        dap.adapters.go = function(callback, config)
          local handle
          local port = 38697
          handle, _ = vim.loop.spawn('dlv', {
            args = { 'dap', '-l', '127.0.0.1:' .. port },
            detached = true,
          }, function(code)
            handle:close()
            if code ~= 0 then
              vim.notify('Delve exited with code ' .. code, vim.log.levels.WARN)
            end
          end)
          vim.defer_fn(function()
            callback { type = 'server', host = '127.0.0.1', port = port }
          end, 100)
        end

        dap.configurations.go = {
          {
            type = 'go',
            name = 'Debug',
            request = 'launch',
            program = '${file}',
          },
        }
      end

      -- Configure Python debugging
      local function setup_python_adapter()
        dap.adapters.python = {
          type = 'executable',
          command = 'python',
          args = { '-m', 'debugpy.adapter' },
        }

        dap.configurations.python = {
          {
            type = 'python',
            request = 'launch',
            name = 'Launch file',
            program = '${file}',
            pythonPath = function()
              local venv_path = os.getenv 'VIRTUAL_ENV'
              if venv_path then
                return venv_path .. '/bin/python'
              else
                return '/usr/bin/python'
              end
            end,
          },
        }
      end

      -- Configure Zig debugging
      local function setup_zig_adapter()
        dap.adapters.lldb = {
          type = 'executable',
          command = '/usr/bin/lldb-vscode',
          name = 'lldb',
        }

        dap.configurations.zig = {
          {
            name = 'Launch Zig Program',
            type = 'lldb',
            request = 'launch',
            program = function()
              return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/zig-out/bin/', 'file')
            end,
            cwd = '${workspaceFolder}',
            stopOnEntry = false,
            args = {},
            runInTerminal = false,
          },
        }
      end

      -- Set up all debug adapters
      setup_go_adapter()
      setup_python_adapter()
      setup_zig_adapter()
    end,
  },
  {
    'rcarriga/nvim-dap-ui',
    dependencies = { 'mfussenegger/nvim-dap', 'nvim-neotest/nvim-nio' },
    config = function()
      local dap = require 'dap'
      local dapui = require 'dapui'

      -- Configure DAP UI
      dapui.setup {
        icons = { expanded = '▾', collapsed = '▸', current_frame = '▸' },
        mappings = {
          -- Use a table to apply multiple mappings
          expand = { '<CR>', '<2-LeftMouse>' },
          open = 'o',
          remove = 'd',
          edit = 'e',
          repl = 'r',
          toggle = 't',
        },
      }

      -- Configure auto-open/close behavior
      dap.listeners.after.event_initialized['dapui_config'] = function()
        dapui.open()
      end

      dap.listeners.before.event_terminated['dapui_config'] = function()
        dapui.close()
      end

      dap.listeners.before.event_exited['dapui_config'] = function()
        dapui.close()
      end
    end,
  },
  {
    'leoluz/nvim-dap-go',
    dependencies = { 'mfussenegger/nvim-dap' },
    config = function()
      require('dap-go').setup {}
    end,
  },
  {
    'mfussenegger/nvim-dap-python',
    dependencies = { 'mfussenegger/nvim-dap' },
    config = function()
      require('dap-python').setup '~/.virtualenvs/debugpy/bin/python'
      require('dap-python').test_runner = 'pytest'
    end,
  },
  -- Streamlined testing workflow with neotest
  {
    'nvim-neotest/neotest',
    dependencies = {
      'nvim-lua/plenary.nvim',
      'nvim-treesitter/nvim-treesitter',
      'antoinemadec/FixCursorHold.nvim',
      'nvim-neotest/neotest-go',
      'nvim-neotest/neotest-python',
    },
    config = function()
      require('neotest').setup {
        adapters = {
          require 'neotest-python' {
            dap = { justMyCode = false },
            runner = 'pytest',
          },
          require 'neotest-go' {},
        },
        status = { virtual_text = true },
        output = { open_on_run = true },
      }
    end,
    keys = {
      {
        '<leader>tf',
        function()
          require('neotest').run.run(vim.fn.expand '%')
        end,
        desc = 'Run File Tests (Neotest)',
      },
      {
        '<leader>tn',
        function()
          require('neotest').run.run()
        end,
        desc = 'Run Nearest Test (Neotest)',
      },
      {
        '<leader>ts',
        function()
          require('neotest').summary.toggle()
        end,
        desc = 'Toggle Test Summary (Neotest)',
      },
      {
        '<leader>to',
        function()
          require('neotest').output.open { enter = true }
        end,
        desc = 'Show Test Output (Neotest)',
      },
      {
        '<leader>td',
        function()
          require('neotest').run.run { strategy = 'dap' }
        end,
        desc = 'Debug Nearest Test (Neotest)',
      },
    },
  },
}

================
File: lua/plugins/editor.lua
================
return {
  -- Buffer deletion
  {
    'famiu/bufdelete.nvim',
    cmd = { 'Bdelete', 'Bwipeout' },
  },

  -- Which-key for keybinding help
  {
    'folke/which-key.nvim',
    event = 'VeryLazy',
    opts = {},
    keys = {
      {
        '<leader>?',
        function()
          require('which-key').show { global = false }
        end,
        desc = 'Buffer Local Keymaps (which-key)',
      },
    },
  },

  -- Comment.nvim for easy commenting
  {
    'numToStr/Comment.nvim',
    config = function()
      require('Comment').setup()
    end,
  },

  -- Terminal integration
  {
    'akinsho/toggleterm.nvim',
    config = function()
      require('toggleterm').setup {
        size = 15,
        open_mapping = [[<c-\>]],
        direction = 'horizontal',
      }
      vim.keymap.set('n', '<leader>t', function()
        require('toggleterm').toggle()
      end, { desc = 'Toggle Terminal' })
    end,
  },

  -- File explorer
  {
    'nvim-tree/nvim-tree.lua',
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    config = function()
      require('nvim-tree').setup {
        view = {
          width = 30,
          side = 'left',
        },
        renderer = {
          icons = {
            show = {
              file = true,
              folder = true,
              folder_arrow = true,
            },
          },
        },
        update_focused_file = {
          enable = true,
          update_cwd = true,
        },
      }
      vim.keymap.set('n', '<leader>e', function()
        require('nvim-tree.api').tree.toggle()
      end, { desc = 'Toggle File Explorer' })
      vim.keymap.set('n', '<C-w>e', function()
        local nvim_tree = require 'nvim-tree.api'
        local current_buf = vim.api.nvim_get_current_buf()
        local current_buf_ft = vim.api.nvim_buf_get_option(current_buf, 'filetype')

        if current_buf_ft == 'NvimTree' then
          vim.cmd 'wincmd p'
        else
          nvim_tree.tree.focus()
        end
      end, { desc = 'Focus NvimTree' })
    end,
  },

  -- Faster navigation between frequently used files with Harpoon
  {
    'ThePrimeagen/harpoon',
    dependencies = { 'nvim-lua/plenary.nvim' },
    config = function()
      require('harpoon').setup {}
    end,
    keys = {
      {
        '<leader>ha',
        function()
          require('harpoon.mark').add_file()
        end,
        desc = 'Mark File (Harpoon)',
      },
      {
        '<leader>hh',
        function()
          require('harpoon.ui').toggle_quick_menu()
        end,
        desc = 'Harpoon Menu',
      },
      {
        '<leader>h1',
        function()
          require('harpoon.ui').nav_file(1)
        end,
        desc = 'Go to Harpoon File 1',
      },
      {
        '<leader>h2',
        function()
          require('harpoon.ui').nav_file(2)
        end,
        desc = 'Go to Harpoon File 2',
      },
      {
        '<leader>h3',
        function()
          require('harpoon.ui').nav_file(3)
        end,
        desc = 'Go to Harpoon File 3',
      },
      {
        '<leader>h4',
        function()
          require('harpoon.ui').nav_file(4)
        end,
        desc = 'Go to Harpoon File 4',
      },
    },
  },
}

================
File: lua/plugins/formatting.lua
================
return {
  {
    'stevearc/conform.nvim',
    config = function()
      -- Define custom formatters
      local custom_formatters = {
        zigfmt = {
          command = 'zig',
          args = { 'fmt', '--stdin' },
          stdin = true,
        },
        php_cs_fixer = {
          command = 'php-cs-fixer',
          args = { 'fix', '--using-cache=no', '--quiet', '--format=json', '--' },
          stdin = false,
        },
      }

      -- Define formatters by filetype
      local formatters_by_ft = {
        lua = { 'stylua' },
        go = { 'gofmt' },
        javascript = { 'prettier' },
        typescript = { 'prettier' },
        sql = { 'sql_formatter' },
        sh = { 'shfmt' },
        bash = { 'shfmt' },
        html = { 'prettier' },
        css = { 'prettier' },
        json = { 'prettier' },
        yaml = { 'prettier', 'yamlfmt' },
        markdown = { 'prettier' },
        python = { 'black' },
        terraform = { 'terraform_fmt' },
        dockerfile = { 'prettier', 'dockerfile_lint' },
        hcl = { 'terraform_fmt' },
        zig = { 'zigfmt' },
        php = { 'php_cs_fixer' },
      }

      -- Define format on save options
      local format_on_save_opts = {
        timeout_ms = 1000,
        lsp_fallback = true,
      }

      -- Configure conform
      require('conform').setup {
        formatters = custom_formatters,
        formatters_by_ft = formatters_by_ft,
        format_on_save = format_on_save_opts,
      }
    end,
  },
}

================
File: lua/plugins/git.lua
================
return {
  {
    'lewis6991/gitsigns.nvim',
    event = { 'BufRead', 'BufNewFile' },
    opts = {
      on_attach = function(bufnr)
        local gs = package.loaded.gitsigns

        -- Create a helper function to set keymaps
        local function map(mode, lhs, rhs, opts)
          opts = opts or {}
          opts.buffer = bufnr
          vim.keymap.set(mode, lhs, rhs, opts)
        end

        -- Navigation keymaps
        map('n', ']h', function()
          if vim.wo.diff then
            return ']h'
          end
          vim.schedule(function()
            gs.next_hunk()
          end)
          return '<Ignore>'
        end, { expr = true, desc = 'Next Git Hunk' })

        map('n', '[h', function()
          if vim.wo.diff then
            return '[h'
          end
          vim.schedule(function()
            gs.prev_hunk()
          end)
          return '<Ignore>'
        end, { expr = true, desc = 'Previous Git Hunk' })

        -- Action keymaps - replace string commands with function calls
        map({ 'n', 'v' }, '<leader>gs', function()
          gs.stage_hunk()
        end, { desc = 'Stage Hunk' })
        map({ 'n', 'v' }, '<leader>gr', function()
          gs.reset_hunk()
        end, { desc = 'Reset Hunk' })
        map('n', '<leader>gS', gs.stage_buffer, { desc = 'Stage Buffer' })
        map('n', '<leader>gu', gs.undo_stage_hunk, { desc = 'Undo Stage Hunk' })
        map('n', '<leader>gR', gs.reset_buffer, { desc = 'Reset Buffer' })
        map('n', '<leader>gp', gs.preview_hunk, { desc = 'Preview Hunk' })
        map('n', '<leader>gb', function()
          gs.blame_line { full = true }
        end, { desc = 'Blame Line' })
        map('n', '<leader>gd', gs.diffthis, { desc = 'Diff This' })
        map('n', '<leader>gD', function()
          gs.diffthis '~'
        end, { desc = 'Diff Against HEAD' })
        map('n', '<leader>gt', gs.toggle_deleted, { desc = 'Toggle Deleted Lines' })

        -- Text object - replace command string with function call
        map({ 'o', 'x' }, 'ih', function()
          gs.select_hunk()
        end, { desc = 'Select Hunk' })
      end,
      signs = {
        add = { text = '│' },
        change = { text = '│' },
        delete = { text = '_' },
        topdelete = { text = '‾' },
        changedelete = { text = '~' },
        untracked = { text = '┆' },
      },
    },
  },
  -- Magit-like Git interface with Neogit
  {
    'NeogitOrg/neogit',
    dependencies = {
      'nvim-lua/plenary.nvim',
      'sindrets/diffview.nvim',
      'nvim-telescope/telescope.nvim',
    },
    config = function()
      require('neogit').setup {
        integrations = { diffview = true },
      }
    end,
    keys = {
      {
        '<leader>gg',
        function()
          require('neogit').open()
        end,
        desc = 'Open Neogit',
      },
      {
        '<leader>gc',
        function()
          require('neogit').open { 'commit' }
        end,
        desc = 'Neogit Commit',
      },
    },
  },
}

================
File: lua/plugins/lsp.lua
================
return {
  {
    'williamboman/mason.nvim',
    opts = {
      ensure_installed = {
        'debugpy', -- Python debugging
        'delve', -- Go debugging
        'gofmt', -- Go formatting
        'prettier', -- Code formatting
        'pyright', -- Python LSP
        'sql-formatter',
        'zls', -- Zig LSP
        'intelephense', -- PHP LSP
        'stylua', -- Lua formatting
        'lua-language-server', -- Lua LSP
        'luacheck', -- Lua static analyzer
      },
    },
  },
  -- Add neodev.nvim for better Neovim Lua development
  {
    'folke/neodev.nvim',
    opts = {
      library = {
        enabled = true,
        runtime = true,
        types = true,
        plugins = true,
      },
      setup_jsonls = true, -- configures jsonls to provide completion for project config
      lspconfig = true,
      pathStrict = true,
    },
  },
  {
    'williamboman/mason-lspconfig.nvim',
    dependencies = { 'williamboman/mason.nvim', 'neovim/nvim-lspconfig' },
    opts = {
      ensure_installed = {
        'dockerls',
        'eslint',
        'gopls',
        'jsonls',
        'pyright',
        'sqlls',
        'tailwindcss',
        'templ',
        'terraformls',
        'ts_ls',
        'yamlls',
        'zls',
        'intelephense',
        'lua_ls', -- Lua language server
      },
    },
  },
  {
    'neovim/nvim-lspconfig',
    dependencies = {
      'hrsh7th/cmp-nvim-lsp',
      'folke/neodev.nvim', -- Add dependency here too
    },
    config = function()
      -- Setup neodev first (must be called before lua_ls)
      require('neodev').setup {}

      local lspconfig = require 'lspconfig'
      local cmp_nvim_lsp = require 'cmp_nvim_lsp'
      local capabilities = cmp_nvim_lsp.default_capabilities()

      -- Define LSP keymaps function
      local function setup_lsp_keymaps(client, bufnr)
        -- Create a local keymap function
        local function buf_keymap(mode, lhs, rhs, opts)
          opts = opts or {}
          opts.buffer = bufnr
          vim.keymap.set(mode, lhs, rhs, opts)
        end

        -- LSP navigation keymaps
        buf_keymap('n', 'gd', vim.lsp.buf.definition, { desc = 'Go to Definition' })
        buf_keymap('n', 'gr', vim.lsp.buf.references, { desc = 'Find References' })
        buf_keymap('n', 'gi', vim.lsp.buf.implementation, { desc = 'Go to Implementation' })
        buf_keymap('n', 'K', vim.lsp.buf.hover, { desc = 'Hover Documentation' })
        buf_keymap('n', '<leader>rn', vim.lsp.buf.rename, { desc = 'Rename Symbol' })
        buf_keymap('n', '<leader>ca', vim.lsp.buf.code_action, { desc = 'Code Action' })
        buf_keymap('n', '<leader>f', function()
          vim.lsp.buf.format { async = true }
        end, { desc = 'Format Document' })

        -- Debug keymaps (only if dap is available)
        local dap_ok, dap = pcall(require, 'dap')
        if dap_ok then
          buf_keymap('n', '<leader>db', dap.toggle_breakpoint, { desc = 'Toggle Breakpoint' })
          buf_keymap('n', '<leader>dc', dap.continue, { desc = 'Continue Execution' })
          buf_keymap('n', '<leader>ds', dap.step_over, { desc = 'Step Over' })
          buf_keymap('n', '<leader>di', dap.step_into, { desc = 'Step Into' })
          buf_keymap('n', '<leader>do', dap.step_out, { desc = 'Step Out' })
          buf_keymap('n', '<leader>du', function()
            require('dapui').toggle()
          end, { desc = 'Toggle DAP UI' })
        end
      end

      -- On attach function for LSP servers
      local on_attach = function(client, bufnr)
        if client.name ~= 'eslint' then
          client.server_capabilities.document_formatting = true
        end

        setup_lsp_keymaps(client, bufnr)
      end

      -- Server configuration table
      local server_configs = {
        dockerls = {},
        eslint = {},
        gopls = {},
        jsonls = {},
        pyright = {},
        sqlls = {},
        tailwindcss = {},
        templ = {},
        terraformls = {},
        ts_ls = {},
        intelephense = {},
        zls = {},
        yamlls = {
          settings = {
            yaml = {
              schemas = {
                ['https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json'] = 'docker-compose*.yml',
              },
              keyOrdering = false,
            },
          },
        },
        -- Add Lua Language Server with Neovim-specific configuration
        lua_ls = {
          settings = {
            Lua = {
              runtime = {
                -- Use LuaJIT for Neovim
                version = 'LuaJIT',
              },
              diagnostics = {
                -- Recognize the vim global
                globals = {
                  'vim',
                  -- Add other globals used in your config
                  'require',
                },
              },
              workspace = {
                -- Make the server aware of Neovim runtime files
                library = vim.api.nvim_get_runtime_file('', true),
                checkThirdParty = false,
              },
              -- Do not send telemetry data
              telemetry = {
                enable = false,
              },
              -- Format settings
              format = {
                enable = true,
                -- Use stylua rather than the built-in formatter
                defaultConfig = {
                  indent_style = 'space',
                  indent_size = '2',
                },
              },
            },
          },
        },
      }

      -- Set up each LSP server with its configuration
      for server_name, config in pairs(server_configs) do
        config.capabilities = capabilities
        config.on_attach = on_attach
        lspconfig[server_name].setup(config)
      end
    end,
  },
  -- Inline function signatures
  {
    'ray-x/lsp_signature.nvim',
    event = 'BufReadPre',
    opts = {
      bind = true,
      hint_prefix = '💡 ',
      handler_opts = {
        border = 'rounded',
      },
    },
    config = function(_, opts)
      require('lsp_signature').setup(opts)
    end,
  },
  -- Enhanced diagnostics UI with Trouble
  {
    'folke/trouble.nvim',
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    opts = {}, -- Use default options
    keys = {
      {
        '<leader>xx',
        function()
          require('trouble').toggle()
        end,
        desc = 'Toggle Trouble (Diagnostics)',
      },
      {
        '<leader>xw',
        function()
          require('trouble').toggle 'workspace_diagnostics'
        end,
        desc = 'Workspace Diagnostics (Trouble)',
      },
      {
        '<leader>xd',
        function()
          require('trouble').toggle 'document_diagnostics'
        end,
        desc = 'Document Diagnostics (Trouble)',
      },
      {
        '<leader>xl',
        function()
          require('trouble').toggle 'loclist'
        end,
        desc = 'Location List (Trouble)',
      },
      {
        '<leader>xq',
        function()
          require('trouble').toggle 'quickfix'
        end,
        desc = 'Quickfix List (Trouble)',
      },
      {
        'gR',
        function()
          require('trouble').lsp_references()
        end,
        desc = 'LSP References (Trouble)',
      },
    },
  },
}

================
File: lua/plugins/telescope.lua
================
return {
  {
    'nvim-telescope/telescope.nvim',
    dependencies = { 'nvim-lua/plenary.nvim' },
    config = function()
      -- Configure Telescope
      local telescope = require 'telescope'
      local actions = require 'telescope.actions'
      local builtin = require 'telescope.builtin'

      -- Setup the main telescope configuration
      telescope.setup {
        defaults = {
          file_ignore_patterns = { '.git/' },
          mappings = {
            i = {
              ['<C-u>'] = false,
              ['<C-d>'] = false,
            },
          },
        },
        pickers = {
          buffers = {
            mappings = {
              i = {
                ['<C-d>'] = function(prompt_bufnr)
                  local action_state = require 'telescope.actions.state'
                  local entry = action_state.get_selected_entry()
                  if entry then
                    require('bufdelete').bufdelete(entry.bufnr, true)
                  end
                  actions.close(prompt_bufnr)
                end,
              },
            },
          },
        },
        extensions = {
          projects = {
            base_dirs = {
              '~/home',
              '~/work',
            },
            hidden_files = true,
            theme = 'dropdown',
          },
        },
      }

      -- Load extensions
      telescope.load_extension 'projects'

      -- Define keymaps in a separate section
      local telescope_keymaps = {
        { mode = 'n', key = '<leader>ff', action = builtin.find_files, desc = 'Find Files' },
        { mode = 'n', key = '<leader>fg', action = builtin.live_grep, desc = 'Live Grep' },
        { mode = 'n', key = '<leader>fb', action = builtin.buffers, desc = 'List Buffers' },
        { mode = 'n', key = '<leader>fh', action = builtin.help_tags, desc = 'Help Tags' },
        { mode = 'n', key = '<leader>fp', action = telescope.extensions.projects.projects, desc = 'Find Projects' },
      }

      -- Apply all keymaps
      for _, mapping in ipairs(telescope_keymaps) do
        vim.keymap.set(mapping.mode, mapping.key, mapping.action, { desc = mapping.desc })
      end
    end,
  },

  -- Project management
  {
    'ahmedkhalf/project.nvim',
    config = function()
      require('project_nvim').setup {
        detection_methods = { 'pattern', 'lsp' },
        patterns = { '.git', '_darcs', '.hg', '.bzr', '.svn', 'Makefile', 'package.json' },
        show_hidden = true,
        silent_chdir = false,
        ignore_lsp = {},
        datapath = vim.fn.stdpath 'data',
      }
    end,
  },
}

================
File: lua/plugins/treesitter.lua
================
return {
  {
    'nvim-treesitter/nvim-treesitter',
    build = ':TSUpdate',
    dependencies = {
      'nvim-treesitter/nvim-treesitter-textobjects',
      'vrischmann/tree-sitter-templ',
    },
    config = function()
      -- Define parsers to install
      local parsers = {
        'css',
        'dockerfile',
        'go',
        'html',
        'javascript',
        'json',
        'lua',
        'php',
        'python',
        'sql',
        'templ',
        'terraform',
        'tsx',
        'typescript',
        'yaml',
        'zig',
      }

      -- Text objects selection configuration
      local select_textobjects = {
        enable = true,
        lookahead = true,
        keymaps = {
          ['af'] = '@function.outer',
          ['if'] = '@function.inner',
          ['ac'] = '@class.outer',
          ['ic'] = '@class.inner',
          ['aB'] = '@block.outer',
          ['iB'] = '@block.inner',
          ['aP'] = '@parameter.outer',
          ['iP'] = '@parameter.inner',
        },
        selection_modes = {
          ['@parameter.outer'] = 'v',
          ['@function.outer'] = 'V',
          ['@class.outer'] = '<c-v>',
        },
      }

      -- Text objects movement configuration
      local move_textobjects = {
        enable = true,
        set_jumps = true,
        goto_next_start = {
          [']f'] = '@function.outer',
          [']]'] = '@class.outer',
        },
        goto_next_end = {
          [']F'] = '@function.outer',
          [']['] = '@class.outer',
        },
        goto_previous_start = {
          ['[f'] = '@function.outer',
          ['[['] = '@class.outer',
        },
        goto_previous_end = {
          ['[F'] = '@function.outer',
          ['[]'] = '@class.outer',
        },
      }

      -- Text objects swap configuration
      local swap_textobjects = {
        enable = true,
        swap_next = {
          ['<leader>a'] = '@parameter.inner',
        },
        swap_previous = {
          ['<leader>A'] = '@parameter.inner',
        },
      }

      -- Main treesitter configuration
      require('nvim-treesitter.configs').setup {
        ensure_installed = parsers,
        auto_install = true,
        highlight = { enable = true },
        indent = { enable = true },
        textobjects = {
          select = select_textobjects,
          move = move_textobjects,
          swap = swap_textobjects,
        },
      }
    end,
  },
}

================
File: lua/plugins/ui.lua
================
return {
  {
    'kepano/flexoki-neovim',
    priority = 1000,
    config = function()
      vim.api.nvim_command 'colorscheme flexoki-dark'
    end,
  },
  {
    'nvim-lualine/lualine.nvim',
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    config = function()
      require('lualine').setup {
        options = {
          theme = 'auto',
          component_separators = { left = '|', right = '|' },
          section_separators = { left = '', right = '' },
        },
      }
    end,
  },
  {
    'akinsho/bufferline.nvim',
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    version = '*',
    opts = {
      options = {
        mode = 'buffers',
        numbers = 'ordinal',
        close_command = 'Bdelete! %d',
        right_mouse_command = 'Bdelete! %d',
        diagnostics = 'nvim_lsp',
        diagnostics_indicator = function(count, level, diagnostics_dict, context)
          local s = ' '
          for e, n in pairs(diagnostics_dict) do
            local sym = e == 'error' and ' ' or (e == 'warning' and ' ' or ' ')
            s = s .. n .. sym
          end
          return s
        end,
        offsets = {
          {
            filetype = 'NvimTree',
            text = 'File Explorer',
            text_align = 'left',
            separator = true,
          },
        },
        separator_style = 'thin',
        always_show_bufferline = true,
        show_buffer_close_icons = true,
        show_close_icon = true,
      },
    },
  },
}

================
File: .luacheckrc
================
-- Globals for Neovim Lua configuration
globals = {
  'vim',
  -- Additional Neovim-related globals
  'assert',
  'pcall',
  'xpcall',
  'select',
  'pairs',
  'ipairs',
  'type',
  'tonumber',
  'tostring',
  'error',
  'warn',
  -- Common modules/plugins often used in Neovim config
  'require',
  'packer',
  'use',
}

-- Standard globals to ignore
ignore = {
  '111', -- Setting non-standard global
  '212', -- Unused argument
  '213', -- Unused loop variable
  '542', -- Empty if branch
}

-- Files to exclude
exclude_files = {
  'lua/lazy-lock.json',
  'lazy-lock.json',
  '.luacheckrc',
  '*.json',
  '*.txt',
  '*.md',
}

-- Maximum line length
max_line_length = 160

-- Allow self to be defined as a parameter in class methods
self = false

-- Set max cyclomatic complexity (prevents deeply nested code)
max_cyclomatic_complexity = 15

-- Standard Lua stdlib
std = 'lua54' -- LuaJIT is closest to Lua 5.4

================
File: .stylua.toml
================
column_width = 160
line_endings = "Unix"
indent_type = "Spaces"
indent_width = 2
quote_style = "AutoPreferSingle"
call_parentheses = "None"

================
File: clenup.sh
================
#!/bin/bash

set -euo pipefail

echo "Starting Neovim cleanup..."

directories=(
    "$HOME/.local/share/nvim"
    "$HOME/.cache/nvim"
)

for dir in "${directories[@]}"; do
    if [ -e "$dir" ]; then
        echo "Removing $dir..."
        rm -rf "$dir"
    else
        echo "$dir does not exist, skipping."
    fi
done

echo "Neovim cleanup completed."

================
File: init.lua
================
-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system {
    'git',
    'clone',
    '--filter=blob:none',
    'https://github.com/folke/lazy.nvim.git',
    '--branch=stable',
    lazypath,
  }
end
vim.opt.rtp:prepend(lazypath)

-- Load core configurations
require 'config.options'
require 'config.keymaps'
require 'config.autocmds'

-- Setup plugins
require('lazy').setup('plugins', {
  change_detection = {
    notify = false,
  },
})

================
File: lazy-lock.json
================
{
  "Comment.nvim": { "branch": "master", "commit": "e30b7f2008e52442154b66f7c519bfd2f1e32acb" },
  "FixCursorHold.nvim": { "branch": "master", "commit": "1900f89dc17c603eec29960f57c00bd9ae696495" },
  "LuaSnip": { "branch": "master", "commit": "e808bee352d1a6fcf902ca1a71cee76e60e24071" },
  "bufdelete.nvim": { "branch": "master", "commit": "f6bcea78afb3060b198125256f897040538bcb81" },
  "bufferline.nvim": { "branch": "main", "commit": "655133c3b4c3e5e05ec549b9f8cc2894ac6f51b3" },
  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "39e2eda76828d88b773cc27a3f61d2ad782c922d" },
  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
  "cmp_luasnip": { "branch": "master", "commit": "05a9ab28b53f71d1aece421ef32fee2cb857a843" },
  "conform.nvim": { "branch": "master", "commit": "40d4e98fcc3e6f485f0e8924c63734bc7e305967" },
  "diffview.nvim": { "branch": "main", "commit": "4516612fe98ff56ae0415a259ff6361a89419b0a" },
  "flexoki-neovim": { "branch": "main", "commit": "975654bce67514114db89373539621cff42befb5" },
  "friendly-snippets": { "branch": "main", "commit": "de8fce94985873666bd9712ea3e49ee17aadb1ed" },
  "gitsigns.nvim": { "branch": "main", "commit": "863903631e676b33e8be2acb17512fdc1b80b4fb" },
  "harpoon": { "branch": "master", "commit": "1bc17e3e42ea3c46b33c0bbad6a880792692a1b3" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "lsp_signature.nvim": { "branch": "master", "commit": "15bb33cdb47e85278e168cad11acb1b6fa9c6488" },
  "lualine.nvim": { "branch": "master", "commit": "b431d228b7bbcdaea818bdc3e25b8cdbe861f056" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "25c11854aa25558ee6c03432edfa0df0217324be" },
  "mason.nvim": { "branch": "main", "commit": "e2f7f9044ec30067bc11800a9e266664b88cda22" },
  "neodev.nvim": { "branch": "main", "commit": "46aa467dca16cf3dfe27098042402066d2ae242d" },
  "neogit": { "branch": "master", "commit": "9bb1e73c534f767607e0a888f3de4c942825c501" },
  "neotest": { "branch": "master", "commit": "6267dcd577aa519c828d2526b05844770d3a2c6a" },
  "neotest-go": { "branch": "main", "commit": "92950ad7be2ca02a41abca5c6600ff6ffaf5b5d6" },
  "neotest-python": { "branch": "master", "commit": "a2861ab3c9a0bf75a56b11835c2bfc8270f5be7e" },
  "nvim-cmp": { "branch": "main", "commit": "ae644feb7b67bf1ce4260c231d1d4300b19c6f30" },
  "nvim-dap": { "branch": "master", "commit": "7ff6936010b7222fea2caea0f67ed77f1b7c60dd" },
  "nvim-dap-go": { "branch": "main", "commit": "6aa88167ea1224bcef578e8c7160fe8afbb44848" },
  "nvim-dap-python": { "branch": "master", "commit": "03fe9592409236b9121c03b66a682dfca15a5cac" },
  "nvim-dap-ui": { "branch": "master", "commit": "ffa89839f97bad360e78428d5c740fdad9a0ff02" },
  "nvim-lspconfig": { "branch": "master", "commit": "ff69ecca55d83ffc70657f260a799f79a5637831" },
  "nvim-nio": { "branch": "master", "commit": "a428f309119086dc78dd4b19306d2d67be884eee" },
  "nvim-tree.lua": { "branch": "master", "commit": "5ad87620ec9d1190d15c88171a3f0122bc16b0fe" },
  "nvim-treesitter": { "branch": "master", "commit": "84bdd59c0365944e8914697e508d1c087977ee33" },
  "nvim-treesitter-textobjects": { "branch": "master", "commit": "b91c98afa6c42819aea6cbc1ba38272f5456a5cf" },
  "nvim-web-devicons": { "branch": "master", "commit": "19d257cf889f79f4022163c3fbb5e08639077bd8" },
  "plenary.nvim": { "branch": "master", "commit": "2d9b06177a975543726ce5c73fca176cedbffe9d" },
  "project.nvim": { "branch": "main", "commit": "8c6bad7d22eef1b71144b401c9f74ed01526a4fb" },
  "supermaven-nvim": { "branch": "main", "commit": "07d20fce48a5629686aefb0a7cd4b25e33947d50" },
  "telescope.nvim": { "branch": "master", "commit": "df534c3042572fb958586facd02841e10186707c" },
  "toggleterm.nvim": { "branch": "main", "commit": "137d06fb103952a0fb567882bb8527e2f92d327d" },
  "tree-sitter-templ": { "branch": "master", "commit": "e3e894ef9e490c3d36d94a51458ec55480991730" },
  "trouble.nvim": { "branch": "main", "commit": "85bedb7eb7fa331a2ccbecb9202d8abba64d37b3" },
  "which-key.nvim": { "branch": "main", "commit": "8badb359f7ab8711e2575ef75dfe6fbbd87e4821" }
}



================================================================
End of Codebase
================================================================
